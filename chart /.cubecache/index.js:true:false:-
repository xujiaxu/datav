{"queryPath":"/index.js","absPath":"/Users/jiaxuxu/study/datav/chart /index.js","realPath":"/index.js","type":"script","source":"var Event = require('bcore/event');\nvar $ = require('jquery');\nvar _ = require('lodash');\nvar Chart = require('echarts');\nvar Utils = require('datav:/com/maliang-echarts-utils/0.0.18');\n\n/**\n * 马良基础类\n */\nmodule.exports = Event.extend(function Base(container, config) {\n  this.config = {\n    theme: {}\n  }\n  this.container = $(container);           //容器\n  this.apis = config.apis;                 //hook一定要有\n  this._data = null;                       //数据\n  this.chart = null;                       //图表\n  this.init(config);\n}, {\n  /**\n   * 公有初始化\n   */\n  init: function (config) {\n    //1.初始化,合并配置\n    this.mergeConfig(config);\n    //2.刷新布局,针对有子组件的组件 可有可无\n    this.updateLayout();\n    // console.log(Chart);\n    //3.子组件实例化\n    this.chart = Chart.init(this.container[0]);\n    //4.如果有需要, 更新样式\n    this.updateStyle();\n  },\n  /**\n   * 绘制\n   * @param data\n   * @param options 不一定有\n   * !!注意: 第二个参数支持config, 就不需要updateOptions这个方法了\n   */\n  render: function (data, config) {\n    data = this.data(data);\n    var cfg = this.mergeConfig(config);\n    this.chart.setOption(this.option(data, cfg));\n    console.log(cfg);\n    //更新图表\n    //this.chart.render(data, cfg);\n    // this.container.html(data[0].value)\n    //如果有需要的话,更新样式\n    this.updateStyle();\n  },\n  /**\n   *\n   * @param width\n   * @param height\n   */\n  resize: function (width, height) {\n    this.updateLayout(width, height);\n    this.chart.resize({\n      width: width,\n      height: height\n    })\n    //更新图表\n    //this.chart.render({\n    //  width: width,\n    //  height: height\n    //})\n  },\n  /**\n   * 每个组件根据自身需要,从主题中获取颜色 覆盖到自身配置的颜色中.\n   * 暂时可以不填内容\n   */\n  setColors: function () {\n    //比如\n    //var cfg = this.config;\n    //cfg.color = cfg.theme.series[0] || cfg.color;\n  },\n  option: function (data, config) {\n    const xAxisData = [];\n    const yAxisData1 = [];\n    const yAxisData2 = [];\n    // console.log(config);\n    data.forEach(item => {\n      xAxisData.push(item.x);\n      yAxisData1.push(item.y1);\n      yAxisData2.push(item.y2);\n    })\n    return {\n      legend: {\n        left: config.legend.left,\n        right: config.legend.right,\n        data: [config.series[0].name, config.series[1].name,]\n      },\n      xAxis: {\n        type: 'category',\n        show: config.xAxis.show,\n        boundaryGap : false,\n        splitLine: {\n          show: false\n        },\n        axisLabel: {\n          color: '#fff'\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: '#0072ff',\n            width: 1\n          }\n        },\n        axisTick: {\n          show: false\n        },\n        data: xAxisData\n      },\n      yAxis: [\n        {\n          type: 'value',\n          name: config.yAxis.tName,\n          show: config.yAxis.show,\n          splitLine: {\n            show: false\n          },\n          axisLine: {\n            show: true,\n            lineStyle: {\n              color: '#0072ff',\n              width: 1\n            }\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            color: '#fff'\n          }\n        },\n        {\n          type : 'value',\n          name : '万元',\n          min:0,\n          max:100,\n          axisLabel : {\n            formatter: '{value}',\n            textStyle:{\n              color:'#186afe'\n            }\n          },\n          splitLine: {\n            show: false\n          },\n          axisLine: {\n            show: true,\n            lineStyle: {\n              color: '#0072ff',\n              width: 1\n            }\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            color: '#fff'\n          }\n        }\n      ],\n      series: [\n        {\n          data: yAxisData1,\n          type: 'line',\n          itemStyle: {\n            color: '#24f1ff',\n            lineStyle: {\n              color: '#24f1ff',\n              width: 1\n            }\n          }\n        },\n        {\n          data: yAxisData2,\n          type: 'line',\n          itemStyle: {\n            color: '#fdd100',\n            lineStyle: {\n              color: '#fdd100',\n              width: 1\n            }\n          }\n        },\n      ]\n    };\n  },\n  /**\n   * 数据,设置和获取数据\n   * @param data\n   * @returns {*|number}\n   */\n  data: function (data) {\n    if (data) {\n      this._data = data;\n    }\n    return this._data;\n  },\n  /**\n   * 更新配置\n   * 优先级: config.colors > config.theme > this.config.theme > this.config.colors\n   * [注] 有数组的配置一定要替换\n   * @param config\n   * @private\n   */\n  mergeConfig: function (config) {\n    if (!config) {return this.config}\n    this.config.theme = _.defaultsDeep(config.theme || {}, this.config.theme);\n    this.config = _.defaultsDeep(config || {}, this.config);\n    return this.config;\n  },\n  /**\n   * 更新布局\n   * 可有可无\n   */\n  updateLayout: function () {},\n  /**\n   * 更新样式\n   * 有些子组件控制不到的,但是需要控制改变的,在这里实现\n   */\n  updateStyle: function () {\n    var cfg = this.config;\n    this.container.css({\n      'font-size': cfg.size + 'px',\n      'color': cfg.color || '#fff'\n    });\n  },\n  clear: function () {\n    this.chart && this.chart.clear && this.chart.clear();\n  },\n  /**\n   * 更新配置\n   * !!注意:如果render支持第二个参数options, 那updateOptions不是必须的\n   */\n  //updateOptions: function (options) {},\n  /**\n   * 更新某些配置\n   * 给可以增量更新配置的组件用\n   */\n  //updateXXX: function () {},\n  /**\n   * 销毁组件\n   */\n   destroy: function(){\n    this.chart && this.chart.dispose && this.chart.dispose();\n   }\n});","code":"'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Event = require('bcore/event');\nvar $ = require('jquery');\nvar _ = require('lodash');\nvar Chart = require('echarts');\nvar Utils = require('datav:/com/maliang-echarts-utils/0.0.18');\n\nmodule.exports = Event.extend(function Base(container, config) {\n  this.config = {\n    theme: {}\n  };\n  this.container = $(container);\n  this.apis = config.apis;\n  this._data = null;\n  this.chart = null;\n  this.init(config);\n}, {\n  init: function init(config) {\n    this.mergeConfig(config);\n\n    this.updateLayout();\n\n    this.chart = Chart.init(this.container[0]);\n\n    this.updateStyle();\n  },\n\n  render: function render(data, config) {\n    data = this.data(data);\n    var cfg = this.mergeConfig(config);\n    this.chart.setOption(this.option(data, cfg));\n    console.log(cfg);\n\n    this.updateStyle();\n  },\n\n  resize: function resize(width, height) {\n    this.updateLayout(width, height);\n    this.chart.resize({\n      width: width,\n      height: height\n    });\n  },\n\n  setColors: function setColors() {},\n  option: function option(data, config) {\n    var xAxisData = [];\n    var yAxisData1 = [];\n    var yAxisData2 = [];\n\n    data.forEach(function (item) {\n      xAxisData.push(item.x);\n      yAxisData1.push(item.y1);\n      yAxisData2.push(item.y2);\n    });\n    return {\n      legend: {\n        left: config.legend.left,\n        right: config.legend.right,\n        data: [config.series[0].name, config.series[1].name]\n      },\n      xAxis: {\n        type: 'category',\n        show: config.xAxis.show,\n        boundaryGap: false,\n        splitLine: {\n          show: false\n        },\n        axisLabel: {\n          color: '#fff'\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: '#0072ff',\n            width: 1\n          }\n        },\n        axisTick: {\n          show: false\n        },\n        data: xAxisData\n      },\n      yAxis: [{\n        type: 'value',\n        name: config.yAxis.tName,\n        show: config.yAxis.show,\n        splitLine: {\n          show: false\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: '#0072ff',\n            width: 1\n          }\n        },\n        axisTick: {\n          show: false\n        },\n        axisLabel: {\n          color: '#fff'\n        }\n      }, _defineProperty({\n        type: 'value',\n        name: '万元',\n        min: 0,\n        max: 100,\n        axisLabel: {\n          formatter: '{value}',\n          textStyle: {\n            color: '#186afe'\n          }\n        },\n        splitLine: {\n          show: false\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: '#0072ff',\n            width: 1\n          }\n        },\n        axisTick: {\n          show: false\n        }\n      }, 'axisLabel', {\n        color: '#fff'\n      })],\n      series: [{\n        data: yAxisData1,\n        type: 'line',\n        itemStyle: {\n          color: '#24f1ff',\n          lineStyle: {\n            color: '#24f1ff',\n            width: 1\n          }\n        }\n      }, {\n        data: yAxisData2,\n        type: 'line',\n        itemStyle: {\n          color: '#fdd100',\n          lineStyle: {\n            color: '#fdd100',\n            width: 1\n          }\n        }\n      }]\n    };\n  },\n\n  data: function data(_data) {\n    if (_data) {\n      this._data = _data;\n    }\n    return this._data;\n  },\n\n  mergeConfig: function mergeConfig(config) {\n    if (!config) {\n      return this.config;\n    }\n    this.config.theme = _.defaultsDeep(config.theme || {}, this.config.theme);\n    this.config = _.defaultsDeep(config || {}, this.config);\n    return this.config;\n  },\n\n  updateLayout: function updateLayout() {},\n\n  updateStyle: function updateStyle() {\n    var cfg = this.config;\n    this.container.css({\n      'font-size': cfg.size + 'px',\n      'color': cfg.color || '#fff'\n    });\n  },\n  clear: function clear() {\n    this.chart && this.chart.clear && this.chart.clear();\n  },\n\n  destroy: function destroy() {\n    this.chart && this.chart.dispose && this.chart.dispose();\n  }\n});","codeWraped":"Cube(\"/index.js\", [\"/node_modules/bcore/event.js\", \"/node_modules/jquery/dist/jquery.js\", \"/node_modules/lodash/lodash.js\", \"/node_modules/echarts/index.js\", \"datav:/com/maliang-echarts-utils/0.0.18\"], function (module, exports, require, load, process, global) {\n\n  function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}\n\n  var Event = require('/node_modules/bcore/event.js');\n  var $ = require('/node_modules/jquery/dist/jquery.js');\n  var _ = require('/node_modules/lodash/lodash.js');\n  var Chart = require('/node_modules/echarts/index.js');\n  var Utils = require('datav:/com/maliang-echarts-utils/0.0.18');\n\n  module.exports = Event.extend(function Base(container, config) {\n    this.config = {\n      theme: {} };\n\n    this.container = $(container);\n    this.apis = config.apis;\n    this._data = null;\n    this.chart = null;\n    this.init(config);\n  }, {\n    init: function init(config) {\n      this.mergeConfig(config);\n\n      this.updateLayout();\n\n      this.chart = Chart.init(this.container[0]);\n\n      this.updateStyle();\n    },\n\n    render: function render(data, config) {\n      data = this.data(data);\n      var cfg = this.mergeConfig(config);\n      this.chart.setOption(this.option(data, cfg));\n      console.log(cfg);\n\n      this.updateStyle();\n    },\n\n    resize: function resize(width, height) {\n      this.updateLayout(width, height);\n      this.chart.resize({\n        width: width,\n        height: height });\n\n    },\n\n    setColors: function setColors() {},\n    option: function option(data, config) {\n      var xAxisData = [];\n      var yAxisData1 = [];\n      var yAxisData2 = [];\n\n      data.forEach(function (item) {\n        xAxisData.push(item.x);\n        yAxisData1.push(item.y1);\n        yAxisData2.push(item.y2);\n      });\n      return {\n        legend: {\n          left: config.legend.left,\n          right: config.legend.right,\n          data: [config.series[0].name, config.series[1].name] },\n\n        xAxis: {\n          type: 'category',\n          show: config.xAxis.show,\n          boundaryGap: false,\n          splitLine: {\n            show: false },\n\n          axisLabel: {\n            color: '#fff' },\n\n          axisLine: {\n            show: true,\n            lineStyle: {\n              color: '#0072ff',\n              width: 1 } },\n\n\n          axisTick: {\n            show: false },\n\n          data: xAxisData },\n\n        yAxis: [{\n          type: 'value',\n          name: config.yAxis.tName,\n          show: config.yAxis.show,\n          splitLine: {\n            show: false },\n\n          axisLine: {\n            show: true,\n            lineStyle: {\n              color: '#0072ff',\n              width: 1 } },\n\n\n          axisTick: {\n            show: false },\n\n          axisLabel: {\n            color: '#fff' } },\n\n        _defineProperty({\n          type: 'value',\n          name: '万元',\n          min: 0,\n          max: 100,\n          axisLabel: {\n            formatter: '{value}',\n            textStyle: {\n              color: '#186afe' } },\n\n\n          splitLine: {\n            show: false },\n\n          axisLine: {\n            show: true,\n            lineStyle: {\n              color: '#0072ff',\n              width: 1 } },\n\n\n          axisTick: {\n            show: false } },\n\n        'axisLabel', {\n          color: '#fff' })],\n\n        series: [{\n          data: yAxisData1,\n          type: 'line',\n          itemStyle: {\n            color: '#24f1ff',\n            lineStyle: {\n              color: '#24f1ff',\n              width: 1 } } },\n\n\n        {\n          data: yAxisData2,\n          type: 'line',\n          itemStyle: {\n            color: '#fdd100',\n            lineStyle: {\n              color: '#fdd100',\n              width: 1 } } }] };\n\n\n\n\n    },\n\n    data: function data(_data) {\n      if (_data) {\n        this._data = _data;\n      }\n      return this._data;\n    },\n\n    mergeConfig: function mergeConfig(config) {\n      if (!config) {\n        return this.config;\n      }\n      this.config.theme = _.defaultsDeep(config.theme || {}, this.config.theme);\n      this.config = _.defaultsDeep(config || {}, this.config);\n      return this.config;\n    },\n\n    updateLayout: function updateLayout() {},\n\n    updateStyle: function updateStyle() {\n      var cfg = this.config;\n      this.container.css({\n        'font-size': cfg.size + 'px',\n        'color': cfg.color || '#fff' });\n\n    },\n    clear: function clear() {\n      this.chart && this.chart.clear && this.chart.clear();\n    },\n\n    destroy: function destroy() {\n      this.chart && this.chart.dispose && this.chart.dispose();\n    } });return module.exports;});","sourceMap":null,"modifyTime":1583927423010,"mime":"application/javascript","wrap":true,"skip":false,"compress":false,"ext":".js","targetExt":".js","loads":[],"originalLoads":[],"requires":["/node_modules/bcore/event.js","/node_modules/jquery/dist/jquery.js","/node_modules/lodash/lodash.js","/node_modules/echarts/index.js","datav:/com/maliang-echarts-utils/0.0.18"],"requiresOrigin":["/node_modules/bcore/event.js","/node_modules/jquery/dist/jquery.js","/node_modules/lodash/lodash.js","/node_modules/echarts/index.js","datav:/com/maliang-echarts-utils/0.0.18"],"debugInfo":[],"requiresArgsRefer":[{"type":"StringLiteral","start":246,"end":259,"loc":{"start":{"line":5,"column":20},"end":{"line":5,"column":33}},"extra":{"rawValue":"bcore/event","raw":"'bcore/event'"},"value":"/node_modules/bcore/event.js"},{"type":"StringLiteral","start":278,"end":286,"loc":{"start":{"line":6,"column":16},"end":{"line":6,"column":24}},"extra":{"rawValue":"jquery","raw":"'jquery'"},"value":"/node_modules/jquery/dist/jquery.js"},{"type":"StringLiteral","start":305,"end":313,"loc":{"start":{"line":7,"column":16},"end":{"line":7,"column":24}},"extra":{"rawValue":"lodash","raw":"'lodash'"},"value":"/node_modules/lodash/lodash.js"},{"type":"StringLiteral","start":336,"end":345,"loc":{"start":{"line":8,"column":20},"end":{"line":8,"column":29}},"extra":{"rawValue":"echarts","raw":"'echarts'"},"value":"/node_modules/echarts/index.js"},{"type":"StringLiteral","start":368,"end":409,"loc":{"start":{"line":9,"column":20},"end":{"line":9,"column":61}},"extra":{"rawValue":"datav:/com/maliang-echarts-utils/0.0.18","raw":"'datav:/com/maliang-echarts-utils/0.0.18'"},"value":"datav:/com/maliang-echarts-utils/0.0.18"}]}