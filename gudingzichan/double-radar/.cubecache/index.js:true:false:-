{"queryPath":"/index.js","absPath":"/Users/jiaxuxu/study/datav/gudingzichan/double-radar/index.js","realPath":"/index.js","type":"script","source":"var Event = require('bcore/event');\nvar $ = require('jquery');\nvar _ = require('lodash');\nvar Chart = require('echarts');\n\n/**\n * 马良基础类\n */\nmodule.exports = Event.extend(function Base(container, config) {\n  this.config = {\n    theme: {}\n  }\n  this.container = $(container);           //容器\n  this.apis = config.apis;                 //hook一定要有\n  this._data = null;                       //数据\n  this.chart = null;                       //图表\n  this.init(config);\n}, {\n  /**\n   * 公有初始化\n   */\n  init: function (config) {\n    //1.初始化,合并配置\n    this.mergeConfig(config);\n    //2.刷新布局,针对有子组件的组件 可有可无\n    this.updateLayout();\n    //3.子组件实例化\n    this.chart = Chart.init(this.container[0]);\n    //4.如果有需要, 更新样式\n    this.updateStyle();\n  },\n  /**\n   * 绘制\n   * @param data\n   * @param options 不一定有\n   * !!注意: 第二个参数支持config, 就不需要updateOptions这个方法了\n   */\n  render: function (data, config) {\n    data = this.data(data);\n    var cfg = this.mergeConfig(config);\n    //更新图表\n    // this.chart.render(data, cfg);\n    // this.container.html(data[0].value)\n    this.chart.setOption(this.optionData(data, cfg));\n    //如果有需要的话,更新样式\n    this.updateStyle();\n  },\n  optionData(data, config) {\n    let realData = [];\n    let compareAry = [];\n    let max = 0;\n    data.forEach(item => {\n      realData.push(item.value1);\n      compareAry.push(item.value1);\n    });\n    max = Math.max(...compareAry);\n    max = max > 1 ? max * 1.2 : 1; \n    data.forEach(item => {\n      item.max = max;\n    })\n    return {\n      color: '#1feffe',\n      radar: {\n        name: {\n          formatter: function(a, b) {\n            console.log(b);\n            return max > 1 ? `{b|${b.value1}}{c|${config.unit}}\\n{a|${a}}` : `{b|${(b.value1 * 100).toFixed(2)}}{c|${config.unit}}\\n{a|${a}}`;\n          },\n          rich: {\n            a: {\n              align: 'center',\n              color: config.radar.tName.rich.a.color,\n              fontSize: config.radar.tName.rich.a.fontSize,\n              fontWeight: config.radar.tName.rich.a.fontWeight\n            },\n            b: {\n              align: 'center',\n              color: config.radar.tName.rich.b.color,\n              fontSize: config.radar.tName.rich.b.fontSize,\n              fontWeight: config.radar.tName.rich.b.fontWeight\n            },\n            c: {\n              align: 'center',\n              color: config.radar.tName.rich.c.color,\n              fontSize: config.radar.tName.rich.c.fontSize,\n              fontWeight: config.radar.tName.rich.c.fontWeight\n            },\n          }\n        },\n        radius: '60%',\n        indicator: data,\n        splitArea: { // 坐标轴在 grid 区域中的分隔区域，默认不显示。\n          show: true,\n          areaStyle: { // 分隔区域的样式设置。\n            color: ['rgba(255,255,255,0)', 'rgba(255,255,255,0)'], // 分隔区域颜色。分隔区域会按数组中颜色的顺序依次循环设置颜色。默认是一个深浅的间隔色。\n          }\n        },\n        axisLine: { //指向外圈文本的分隔线样式\n          lineStyle: {\n            color: '#055cd1'\n          }\n        },\n        splitLine: {\n          lineStyle: {\n            color: '#055cd1', // 分隔线颜色\n            width: 2, // 分隔线线宽\n          }\n        },\n      },\n      series: [{\n        type: 'radar',\n        symbolSize: 10,\n        data: [{\n          value: realData,\n          itemStyle: {\n            normal: {\n              lineStyle: {\n                color: '#1feffe'\n              },\n              shadowColor: '#1feffe'\n            }\n          },\n          areaStyle: {\n            normal: { // 单项区域填充样式\n              color: '#1882b8',\n              opacity: 0.7 // 区域透明度\n            }\n          }\n        }]\n      }]\n    }\n  },\n  /**\n   *\n   * @param width\n   * @param height\n   */\n  resize: function (width, height) {\n    this.updateLayout(width, height);\n    //更新图表\n    this.chart.resize({\n     width: width,\n     height: height\n    })\n  },\n  /**\n   * 每个组件根据自身需要,从主题中获取颜色 覆盖到自身配置的颜色中.\n   * 暂时可以不填内容\n   */\n  setColors: function () {\n    //比如\n    //var cfg = this.config;\n    //cfg.color = cfg.theme.series[0] || cfg.color;\n  },\n  /**\n   * 数据,设置和获取数据\n   * @param data\n   * @returns {*|number}\n   */\n  data: function (data) {\n    if (data) {\n      this._data = data;\n    }\n    return this._data;\n  },\n  /**\n   * 更新配置\n   * 优先级: config.colors > config.theme > this.config.theme > this.config.colors\n   * [注] 有数组的配置一定要替换\n   * @param config\n   * @private\n   */\n  mergeConfig: function (config) {\n    if (!config) {return this.config}\n    this.config.theme = _.defaultsDeep(config.theme || {}, this.config.theme);\n    this.setColors();\n    this.config = _.defaultsDeep(config || {}, this.config);\n    return this.config;\n  },\n  /**\n   * 更新布局\n   * 可有可无\n   */\n  updateLayout: function () {},\n  /**\n   * 更新样式\n   * 有些子组件控制不到的,但是需要控制改变的,在这里实现\n   */\n  updateStyle: function () {\n    var cfg = this.config;\n    this.container.css({\n      'font-size': cfg.size + 'px',\n      'color': cfg.color || '#fff'\n    });\n  },\n  /**\n   * 更新配置\n   * !!注意:如果render支持第二个参数options, 那updateOptions不是必须的\n   */\n  //updateOptions: function (options) {},\n  /**\n   * 更新某些配置\n   * 给可以增量更新配置的组件用\n   */\n  //updateXXX: function () {},\n  /**\n   * 销毁组件\n   */\n   destroy: function(){\n    this.chart && this.chart.dispose && this.chart.dispose();\n   }\n});","code":"'use strict';\n\nvar Event = require('bcore/event');\nvar $ = require('jquery');\nvar _ = require('lodash');\nvar Chart = require('echarts');\n\nmodule.exports = Event.extend(function Base(container, config) {\n  this.config = {\n    theme: {}\n  };\n  this.container = $(container);\n  this.apis = config.apis;\n  this._data = null;\n  this.chart = null;\n  this.init(config);\n}, {\n  init: function init(config) {\n    this.mergeConfig(config);\n\n    this.updateLayout();\n\n    this.chart = Chart.init(this.container[0]);\n\n    this.updateStyle();\n  },\n\n  render: function render(data, config) {\n    data = this.data(data);\n    var cfg = this.mergeConfig(config);\n\n    this.chart.setOption(this.optionData(data, cfg));\n\n    this.updateStyle();\n  },\n  optionData: function optionData(data, config) {\n    var realData = [];\n    var compareAry = [];\n    var max = 0;\n    data.forEach(function (item) {\n      realData.push(item.value1);\n      compareAry.push(item.value1);\n    });\n    max = Math.max.apply(Math, compareAry);\n    max = max > 1 ? max * 1.2 : 1;\n    data.forEach(function (item) {\n      item.max = max;\n    });\n    return {\n      color: '#1feffe',\n      radar: {\n        name: {\n          formatter: function formatter(a, b) {\n            console.log(b);\n            return max > 1 ? '{b|' + b.value1 + '}{c|' + config.unit + '}\\n{a|' + a + '}' : '{b|' + (b.value1 * 100).toFixed(2) + '}{c|' + config.unit + '}\\n{a|' + a + '}';\n          },\n          rich: {\n            a: {\n              align: 'center',\n              color: config.radar.tName.rich.a.color,\n              fontSize: config.radar.tName.rich.a.fontSize,\n              fontWeight: config.radar.tName.rich.a.fontWeight\n            },\n            b: {\n              align: 'center',\n              color: config.radar.tName.rich.b.color,\n              fontSize: config.radar.tName.rich.b.fontSize,\n              fontWeight: config.radar.tName.rich.b.fontWeight\n            },\n            c: {\n              align: 'center',\n              color: config.radar.tName.rich.c.color,\n              fontSize: config.radar.tName.rich.c.fontSize,\n              fontWeight: config.radar.tName.rich.c.fontWeight\n            }\n          }\n        },\n        radius: '60%',\n        indicator: data,\n        splitArea: {\n          show: true,\n          areaStyle: {\n            color: ['rgba(255,255,255,0)', 'rgba(255,255,255,0)'] }\n        },\n        axisLine: {\n          lineStyle: {\n            color: '#055cd1'\n          }\n        },\n        splitLine: {\n          lineStyle: {\n            color: '#055cd1',\n            width: 2 }\n        }\n      },\n      series: [{\n        type: 'radar',\n        symbolSize: 10,\n        data: [{\n          value: realData,\n          itemStyle: {\n            normal: {\n              lineStyle: {\n                color: '#1feffe'\n              },\n              shadowColor: '#1feffe'\n            }\n          },\n          areaStyle: {\n            normal: {\n              color: '#1882b8',\n              opacity: 0.7 }\n          }\n        }]\n      }]\n    };\n  },\n\n  resize: function resize(width, height) {\n    this.updateLayout(width, height);\n\n    this.chart.resize({\n      width: width,\n      height: height\n    });\n  },\n\n  setColors: function setColors() {},\n\n  data: function data(_data) {\n    if (_data) {\n      this._data = _data;\n    }\n    return this._data;\n  },\n\n  mergeConfig: function mergeConfig(config) {\n    if (!config) {\n      return this.config;\n    }\n    this.config.theme = _.defaultsDeep(config.theme || {}, this.config.theme);\n    this.setColors();\n    this.config = _.defaultsDeep(config || {}, this.config);\n    return this.config;\n  },\n\n  updateLayout: function updateLayout() {},\n\n  updateStyle: function updateStyle() {\n    var cfg = this.config;\n    this.container.css({\n      'font-size': cfg.size + 'px',\n      'color': cfg.color || '#fff'\n    });\n  },\n\n  destroy: function destroy() {\n    this.chart && this.chart.dispose && this.chart.dispose();\n  }\n});","codeWraped":"Cube(\"/index.js\", [\"/node_modules/bcore/event.js\", \"/node_modules/jquery/dist/jquery.js\", \"/node_modules/lodash/lodash.js\", \"/node_modules/echarts/index.js\"], function (module, exports, require, load, process, global) {\n\n  var Event = require('/node_modules/bcore/event.js');\n  var $ = require('/node_modules/jquery/dist/jquery.js');\n  var _ = require('/node_modules/lodash/lodash.js');\n  var Chart = require('/node_modules/echarts/index.js');\n\n  module.exports = Event.extend(function Base(container, config) {\n    this.config = {\n      theme: {} };\n\n    this.container = $(container);\n    this.apis = config.apis;\n    this._data = null;\n    this.chart = null;\n    this.init(config);\n  }, {\n    init: function init(config) {\n      this.mergeConfig(config);\n\n      this.updateLayout();\n\n      this.chart = Chart.init(this.container[0]);\n\n      this.updateStyle();\n    },\n\n    render: function render(data, config) {\n      data = this.data(data);\n      var cfg = this.mergeConfig(config);\n\n      this.chart.setOption(this.optionData(data, cfg));\n\n      this.updateStyle();\n    },\n    optionData: function optionData(data, config) {\n      var realData = [];\n      var compareAry = [];\n      var max = 0;\n      data.forEach(function (item) {\n        realData.push(item.value1);\n        compareAry.push(item.value1);\n      });\n      max = Math.max.apply(Math, compareAry);\n      max = max > 1 ? max * 1.2 : 1;\n      data.forEach(function (item) {\n        item.max = max;\n      });\n      return {\n        color: '#1feffe',\n        radar: {\n          name: {\n            formatter: function formatter(a, b) {\n              console.log(b);\n              return max > 1 ? '{b|' + b.value1 + '}{c|' + config.unit + '}\\n{a|' + a + '}' : '{b|' + (b.value1 * 100).toFixed(2) + '}{c|' + config.unit + '}\\n{a|' + a + '}';\n            },\n            rich: {\n              a: {\n                align: 'center',\n                color: config.radar.tName.rich.a.color,\n                fontSize: config.radar.tName.rich.a.fontSize,\n                fontWeight: config.radar.tName.rich.a.fontWeight },\n\n              b: {\n                align: 'center',\n                color: config.radar.tName.rich.b.color,\n                fontSize: config.radar.tName.rich.b.fontSize,\n                fontWeight: config.radar.tName.rich.b.fontWeight },\n\n              c: {\n                align: 'center',\n                color: config.radar.tName.rich.c.color,\n                fontSize: config.radar.tName.rich.c.fontSize,\n                fontWeight: config.radar.tName.rich.c.fontWeight } } },\n\n\n\n          radius: '60%',\n          indicator: data,\n          splitArea: {\n            show: true,\n            areaStyle: {\n              color: ['rgba(255,255,255,0)', 'rgba(255,255,255,0)'] } },\n\n          axisLine: {\n            lineStyle: {\n              color: '#055cd1' } },\n\n\n          splitLine: {\n            lineStyle: {\n              color: '#055cd1',\n              width: 2 } } },\n\n\n        series: [{\n          type: 'radar',\n          symbolSize: 10,\n          data: [{\n            value: realData,\n            itemStyle: {\n              normal: {\n                lineStyle: {\n                  color: '#1feffe' },\n\n                shadowColor: '#1feffe' } },\n\n\n            areaStyle: {\n              normal: {\n                color: '#1882b8',\n                opacity: 0.7 } } }] }] };\n\n\n\n\n    },\n\n    resize: function resize(width, height) {\n      this.updateLayout(width, height);\n\n      this.chart.resize({\n        width: width,\n        height: height });\n\n    },\n\n    setColors: function setColors() {},\n\n    data: function data(_data) {\n      if (_data) {\n        this._data = _data;\n      }\n      return this._data;\n    },\n\n    mergeConfig: function mergeConfig(config) {\n      if (!config) {\n        return this.config;\n      }\n      this.config.theme = _.defaultsDeep(config.theme || {}, this.config.theme);\n      this.setColors();\n      this.config = _.defaultsDeep(config || {}, this.config);\n      return this.config;\n    },\n\n    updateLayout: function updateLayout() {},\n\n    updateStyle: function updateStyle() {\n      var cfg = this.config;\n      this.container.css({\n        'font-size': cfg.size + 'px',\n        'color': cfg.color || '#fff' });\n\n    },\n\n    destroy: function destroy() {\n      this.chart && this.chart.dispose && this.chart.dispose();\n    } });return module.exports;});","sourceMap":null,"modifyTime":1585577686458,"mime":"application/javascript","wrap":true,"skip":false,"compress":false,"ext":".js","targetExt":".js","loads":[],"originalLoads":[],"requires":["/node_modules/bcore/event.js","/node_modules/jquery/dist/jquery.js","/node_modules/lodash/lodash.js","/node_modules/echarts/index.js"],"requiresOrigin":["/node_modules/bcore/event.js","/node_modules/jquery/dist/jquery.js","/node_modules/lodash/lodash.js","/node_modules/echarts/index.js"],"debugInfo":[],"requiresArgsRefer":[{"type":"StringLiteral","start":35,"end":48,"loc":{"start":{"line":3,"column":20},"end":{"line":3,"column":33}},"extra":{"rawValue":"bcore/event","raw":"'bcore/event'"},"value":"/node_modules/bcore/event.js"},{"type":"StringLiteral","start":67,"end":75,"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":24}},"extra":{"rawValue":"jquery","raw":"'jquery'"},"value":"/node_modules/jquery/dist/jquery.js"},{"type":"StringLiteral","start":94,"end":102,"loc":{"start":{"line":5,"column":16},"end":{"line":5,"column":24}},"extra":{"rawValue":"lodash","raw":"'lodash'"},"value":"/node_modules/lodash/lodash.js"},{"type":"StringLiteral","start":125,"end":134,"loc":{"start":{"line":6,"column":20},"end":{"line":6,"column":29}},"extra":{"rawValue":"echarts","raw":"'echarts'"},"value":"/node_modules/echarts/index.js"}]}